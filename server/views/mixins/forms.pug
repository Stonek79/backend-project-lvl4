- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, label, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(errors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3.mt-2(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= label
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes).mb-3.mt-2
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin textarea(entity, propertyName, label)
  - inputId = getInputId(propertyName)
  .mb-3.mt-2
    label(for= inputId)= label
    textarea(
      id= inputId
      name=getInputName(propertyName)
      class='form-control'
      
      rows='3'
    )&attributes(attributes).mb-3.mt-2= _.get(entity, propertyName, '')

mixin select(entityes, task, propertyName, label, errors = {}, multiple = false)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(errors[propertyName]) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - selectedId = Array.isArray(task[propertyName]) ? task[propertyName].map((el) => el.id) : task[propertyName]
  - currentSelectedId = _.isEmpty(task) ? 0 : selectedId
  - isSelected = (entity) => [currentSelectedId].flat().includes(entity.id) ? true : false
  .mb-3.mt-2(class=(errors[propertyName] && 'has-danger'))
    label(for= inputId)= label
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      multiple=multiple
    )&attributes(attributes).mb-3.mt-2
      if !multiple 
        option
      each entity in entityes
        option(
          value=entity.id
          selected= isSelected(entity)
        )= entity.name
    if !_.isEmpty(propertyErrors && inputId)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin tasksFilter(entityes, filter, propertyName, label)
  - inputId = getInputId(propertyName)
  - isSelected = (entity) => filter === entity.id.toString()
  .col.mb-3
    label(for= inputId)= label
    select(
      id= inputId
      name=propertyName
      class='form-control'
    )&attributes(attributes).ml-2.mr-3
      option
      each entity in entityes
        option(
          value=entity.id
          selected= isSelected(entity)
        )= entity.name

mixin filterByCreator(filter, propertyName, label)
  - inputId = getInputId(propertyName)
  - isChecked = Boolean(filter)
  .mb-3.form-check
    input(
      id=inputId
      name=propertyName
      type='checkbox'
      class='form-check-input'
      checked=isChecked
    )
    label(for= inputId)= label

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes).mt-2

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
